generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  urlSlug   String    @unique
  image     String
  pIndex    Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  image     String?
  urlSlug   String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id                       Int      @id @default(autoincrement())
  name                     String
  description              String
  urlSlug                  String   @unique
  MRP                      Int
  price                    Int
  stock                    Int
  images                   String[]
  tags                     String[]
  pIndex                   Int
  categoryId               Int
  insideValleyShippingCost Int      @default(0)
  brandId                  Int
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  Item                     Item[]
  brand                    Brand    @relation(fields: [brandId], references: [id])
  category                 Category @relation(fields: [categoryId], references: [id])
}

model Item {
  id        Int     @id @default(autoincrement())
  absPrice  Float
  quantity  Int
  productId Int
  orderId   Int?
  Order     Order?  @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id             Int            @id @default(autoincrement())
  orderId        String         @unique
  name           String
  phone          String
  address        String
  city           String
  appartment     String?
  shippingMethod ShippingMethod
  paymentMethod  PaymentMethod
  subtotal       Float
  shipping       Float?
  discount       Float
  total          Float
  postalCode     String?
  status         OrderStatus    @default(PLACED)
  items          Item[]
}

model ServicingBooking {
  id         Int                    @id @default(autoincrement())
  bookingId  String                 @unique
  name       String
  phone      String
  address    String
  city       String
  appartment String?
  postalCode String?
  status     ServicingBookingStatus @default(PENDING)
  appliances Appliance[]
}

model Appliance {
  id                 Int              @id @default(autoincrement())
  brand              String
  servicingBookingId Int
  type               ApplianceType
  ServicingBooking   ServicingBooking @relation(fields: [servicingBookingId], references: [id])
}

enum ShippingMethod {
  INSIDE_VALLEY
  OUTSIDE_VALLEY
  STORE_PICKUP
}

enum PaymentMethod {
  COD
}

enum OrderStatus {
  PLACED
  PROCESSING
  COMPLETED
  CANCELLED
  RETURNED
}

enum ServicingBookingStatus {
  PENDING
  COMPLETED
}

enum ApplianceType {
  WATER_PURIFIER
  SOLAR_WATER_HEATER
  KITCHEN_CHIMNEY
  WASHING_MACHINE
  REFRIGERATOR
  WATER_DISPENSER
  AIR_CONDITIONER
  GAS_STOVE
}
