generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  urlSlug   String    @unique
  image     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  urlSlug   String    @unique
  image     String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  urlSlug     String   @unique
  MRP         Int
  price       Int
  stock       Int
  images      String[]
  tags        String[]
  pIndex      Int      @default(0)
  categoryId  Int
  brandId     Int
  brand       Brand    @relation(fields: [brandId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Item        Item[]
}

model Item {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  absPrice  Float
  quantity  Int
  productId Int
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   Int?
}

model Order {
  id             Int            @id @default(autoincrement())
  orderId        String         @unique
  status         OrderStatus    @default(PENDING)
  name           String
  phone          String
  address        String
  city           String
  appartment     String?
  postalCode     String?
  items          Item[]
  shippingMethod ShippingMethod
  paymentMethod  PaymentMethod
  subtotal       Float
  shipping       Float?
  discount       Float
  total          Float
}

enum ShippingMethod {
  INSIDE_VALLEY
  OUTSIDE_VALLEY
}

enum PaymentMethod {
  COD
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
}

model ServicingBooking {
  id         Int                  @id @default(autoincrement())
  bookingId  String               @unique
  name       String
  phone      String
  address    String
  city       String
  appartment String?
  postalCode String?
  appliances ServicingAppliance[]
}

enum ServicingBookingStatus {
  PENDING
  COMPLETED
}

enum ServicingAppliance {
  WATER_PURIFIER
  SOLAR_WATER_HEATER
  CHIMNEY
}
